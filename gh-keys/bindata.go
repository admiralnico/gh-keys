package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func vagrant_pub() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x1c, 0xc7,
		0x4d, 0x93, 0x63, 0x40, 0x00, 0x80, 0xe1, 0xfb, 0xfe, 0x0a, 0x77, 0xb5,
		0x55, 0x48, 0xd6, 0x70, 0x98, 0x83, 0xa0, 0xe9, 0xf8, 0x16, 0x82, 0xdc,
		0x68, 0x3d, 0x48, 0xb7, 0x8f, 0x88, 0x98, 0x74, 0xff, 0xfa, 0x9d, 0x9a,
		0xf7, 0xf0, 0x56, 0x3d, 0xcf, 0x67, 0xff, 0x77, 0x7d, 0xd6, 0x82, 0xf1,
		0xd3, 0xe9, 0x10, 0xf2, 0xda, 0x94, 0x19, 0x52, 0xec, 0x5f, 0xc2, 0xef,
		0x9f, 0x27, 0xb6, 0xa1, 0x86, 0x40, 0x1b, 0x6a, 0x4a, 0xf7, 0xe4, 0xba,
		0x28, 0x4a, 0x61, 0x91, 0x8c, 0xb0, 0x75, 0xdb, 0x17, 0x1d, 0x17, 0x85,
		0x6a, 0x68, 0xd5, 0x75, 0x15, 0x09, 0x3f, 0x66, 0x77, 0xa7, 0xc2, 0x1f,
		0x9d, 0xcb, 0xe1, 0xb7, 0x38, 0x0d, 0x21, 0xdd, 0x1c, 0x1b, 0xb8, 0xdc,
		0xd2, 0xc4, 0x5d, 0x86, 0x4a, 0x75, 0x56, 0xe7, 0x12, 0xef, 0x68, 0x93,
		0x2b, 0x7c, 0x91, 0x66, 0xdd, 0xbd, 0xb1, 0x50, 0x4e, 0xf4, 0x47, 0x67,
		0x76, 0x3c, 0x07, 0x5b, 0x1b, 0x79, 0xfe, 0xae, 0x42, 0xdc, 0x2e, 0xf4,
		0x31, 0xc7, 0x04, 0x8d, 0x40, 0xaa, 0x2b, 0xbc, 0x29, 0x31, 0xb1, 0xad,
		0xf9, 0x10, 0xd0, 0xec, 0x84, 0x08, 0x28, 0x63, 0x98, 0x19, 0x01, 0x07,
		0x5a, 0x7b, 0xbe, 0x40, 0x30, 0xeb, 0x96, 0xe6, 0x7e, 0xb5, 0xd1, 0x55,
		0x82, 0x46, 0xfb, 0x3e, 0x46, 0x1f, 0xf1, 0x36, 0xbc, 0x0b, 0x6f, 0xfa,
		0xc7, 0x94, 0x3e, 0x08, 0x1d, 0x89, 0x27, 0x31, 0xcb, 0x31, 0x5a, 0x8e,
		0x0b, 0x37, 0x55, 0x32, 0xec, 0x06, 0xec, 0xd9, 0x97, 0x3b, 0x50, 0x90,
		0xaa, 0x72, 0xea, 0xf8, 0xa2, 0x13, 0x97, 0x89, 0x12, 0x14, 0xb7, 0x02,
		0x54, 0x8d, 0xe1, 0xdc, 0xd9, 0x50, 0x9d, 0x27, 0x63, 0x34, 0xe3, 0x43,
		0x18, 0x65, 0xad, 0x74, 0x0f, 0x6e, 0xf6, 0x64, 0x91, 0x26, 0xdf, 0xdf,
		0x7d, 0x30, 0x9e, 0xaa, 0x4b, 0x6b, 0x67, 0x44, 0x5e, 0xd3, 0x6e, 0x14,
		0xd3, 0xa3, 0x1f, 0x71, 0x90, 0x3b, 0xb5, 0xfb, 0x70, 0x2d, 0xdf, 0xf3,
		0x4b, 0x11, 0xc0, 0xd8, 0x43, 0x40, 0x57, 0xfb, 0xf5, 0x85, 0x4a, 0x8e,
		0x0a, 0xe6, 0x37, 0xb0, 0xb1, 0x3b, 0x5b, 0xd7, 0x22, 0x97, 0x4e, 0xd7,
		0xca, 0xe4, 0x69, 0xeb, 0x69, 0x77, 0xfa, 0x18, 0xb5, 0x0d, 0xf7, 0x39,
		0xd2, 0x91, 0x5e, 0xf4, 0xc9, 0xe7, 0xa7, 0xb0, 0xd7, 0xdd, 0x5a, 0x4f,
		0x9b, 0x30, 0x4c, 0x4f, 0x8c, 0x5e, 0x2b, 0x16, 0x96, 0x57, 0x43, 0x07,
		0x24, 0x10, 0xcc, 0xfe, 0xfc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x66,
		0x71, 0xb9, 0x99, 0x01, 0x00, 0x00,
	},
		"vagrant.pub",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"vagrant.pub": vagrant_pub,
}
